name: Build and Deploy MCP Server

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions:
  id-token: write  # Required for OIDC
  contents: read

env:
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Azure Login with OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Build and push to ACR
      run: |
        az acr build \
          --registry ${{ secrets.ACR_NAME }} \
          --image mcp-dev-tools:${{ env.IMAGE_TAG }} \
          --image mcp-dev-tools:latest \
          --file Dockerfile \
          .

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    permissions:
      id-token: write
      contents: read
    steps:
    - uses: actions/checkout@v3
    
    - name: Azure Login with OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Deploy to AKS
      run: |
        # Get ACR login server from ACR name
        export ACR_LOGIN_SERVER=$(az acr show --name ${{ secrets.ACR_NAME }} --query loginServer -o tsv)
        
        az aks get-credentials \
          --resource-group ${{ secrets.RESOURCE_GROUP }} \
          --name ${{ secrets.AKS_NAME }}
        
        kubectl set image deployment/mcp-dev-tools \
          mcp-server=${ACR_LOGIN_SERVER}/mcp-dev-tools:${{ env.IMAGE_TAG }} \
          -n mcp-system
        
        kubectl rollout status deployment/mcp-dev-tools -n mcp-system